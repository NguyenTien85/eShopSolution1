// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShopSolution.Data.EF;

namespace eShopSolution.Data.Migrations
{
    [DbContext(typeof(eShopDbContext))]
    [Migration("20210908150316_add_product_data")]
    partial class add_product_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b08221c3-af8c-4297-b0a7-73d70f660359"),
                            RoleId = new Guid("342d0c2b-adf6-4b25-a631-7242cd9472c4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is home page of eShopSolution"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of eShopSolution"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "This is description of eShopSolution"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("342d0c2b-adf6-4b25-a631-7242cd9472c4"),
                            ConcurrencyStamp = "43fe3e0b-e60c-4677-8454-8887a2c89046",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b08221c3-af8c-4297-b0a7-73d70f660359"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e288ab54-feff-43c9-a283-4b5d904e2cb6",
                            DoB = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nmt08051985@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyen",
                            LastName = "Tien",
                            LockoutEnabled = false,
                            NormalizedEmail = "nmt08051985@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEFV584YufNeVpCzOgLX+fcqKqKQTO/wu31mG1nqBuoO3QA7ojzX0l2Aa9mCACOEfyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            IsShowOnHome = true,
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = "vi",
                            Name = "máy ảnh",
                            SeoAlias = "may-anh",
                            SeoDescription = "máy ảnh",
                            SeoTitle = "máy ảnh"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = "en",
                            Name = "camera",
                            SeoAlias = "camera",
                            SeoDescription = "camera",
                            SeoTitle = "camera"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = "vi",
                            Name = "thẻ nhớ",
                            SeoAlias = "the-nho",
                            SeoDescription = "thẻ nhớ",
                            SeoTitle = "thẻ nhớ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = "en",
                            Name = "memory-card",
                            SeoAlias = "memory-card",
                            SeoDescription = "memory-card",
                            SeoTitle = "memory-card"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            LanguageId = "vi",
                            Name = "giầy nữ",
                            SeoAlias = "giay-nu",
                            SeoDescription = "giầy nữ",
                            SeoTitle = "giầy nữ"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            LanguageId = "en",
                            Name = "boots",
                            SeoAlias = "boots",
                            SeoDescription = "boots",
                            SeoTitle = "boots"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            LanguageId = "vi",
                            Name = "máy đọc sách",
                            SeoAlias = "may-doc-sach",
                            SeoDescription = "máy đọc sách",
                            SeoTitle = "máy đọc sách"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            LanguageId = "en",
                            Name = "e-book reader",
                            SeoAlias = "e-book-reader",
                            SeoDescription = "e-book reader",
                            SeoTitle = "e-book reader"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "vi",
                            IsDefault = true,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en",
                            IsDefault = false,
                            Name = "English"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 646, DateTimeKind.Local).AddTicks(4580),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1669),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1688),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1692),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1695),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1697),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1700),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1703),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1706),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1709),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1711),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1713),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1716),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1719),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1722),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1725),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1727),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1729),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(1731),
                            OriginalPrice = 100000m,
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 647, DateTimeKind.Local).AddTicks(9495),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/1.jpg",
                            IsDefault = false,
                            ProductId = 1,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(244),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/2.jpg",
                            IsDefault = false,
                            ProductId = 2,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 3,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(252),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/3.jpg",
                            IsDefault = false,
                            ProductId = 3,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 4,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(254),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/4.jpg",
                            IsDefault = false,
                            ProductId = 4,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 5,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(256),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/5.jpg",
                            IsDefault = false,
                            ProductId = 5,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 6,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(258),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/6.jpg",
                            IsDefault = false,
                            ProductId = 6,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 7,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(261),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/7.jpg",
                            IsDefault = false,
                            ProductId = 7,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 8,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(263),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/8.jpg",
                            IsDefault = false,
                            ProductId = 8,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 9,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(265),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/9.jpg",
                            IsDefault = false,
                            ProductId = 9,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 10,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(267),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/10.jpg",
                            IsDefault = false,
                            ProductId = 10,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 11,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(268),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/11.jpg",
                            IsDefault = false,
                            ProductId = 11,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 12,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(271),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/12.jpg",
                            IsDefault = false,
                            ProductId = 12,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 13,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(272),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/13.jpg",
                            IsDefault = false,
                            ProductId = 13,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 14,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(274),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/b1.jpg",
                            IsDefault = false,
                            ProductId = 14,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 15,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(277),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/b2.jpg",
                            IsDefault = false,
                            ProductId = 15,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 16,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(279),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/b3.jpg",
                            IsDefault = false,
                            ProductId = 16,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 17,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(281),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/b4.jpg",
                            IsDefault = false,
                            ProductId = 17,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 18,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(283),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/kindle.png",
                            IsDefault = false,
                            ProductId = 18,
                            SortOrder = 0
                        },
                        new
                        {
                            Id = 19,
                            Caption = "",
                            DateCreated = new DateTime(2021, 9, 8, 22, 3, 15, 648, DateTimeKind.Local).AddTicks(285),
                            FileSize = 0L,
                            ImagePath = "/themes/images/products/panasonic.jpg",
                            IsDefault = false,
                            ProductId = 19,
                            SortOrder = 0
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "máy ảnh 1",
                            Details = "máy ảnh 1",
                            LanguageId = "vi",
                            Name = "máy ảnh 1",
                            ProductId = 1,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 1",
                            SeoTitle = "máy ảnh 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "camera 1",
                            Details = "camera 1",
                            LanguageId = "en",
                            Name = "camera 1",
                            ProductId = 1,
                            SeoAlias = "camera 1",
                            SeoDescription = "camera 1",
                            SeoTitle = "camera 1"
                        },
                        new
                        {
                            Id = 3,
                            Description = "máy ảnh 2",
                            Details = "máy ảnh 2",
                            LanguageId = "vi",
                            Name = "máy ảnh 2",
                            ProductId = 2,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 2",
                            SeoTitle = "máy ảnh 2"
                        },
                        new
                        {
                            Id = 4,
                            Description = "camera 2",
                            Details = "camera 2",
                            LanguageId = "en",
                            Name = "camera 2",
                            ProductId = 2,
                            SeoAlias = "camera 2",
                            SeoDescription = "camera 2",
                            SeoTitle = "camera 2"
                        },
                        new
                        {
                            Id = 5,
                            Description = "máy ảnh 3",
                            Details = "máy ảnh 3",
                            LanguageId = "vi",
                            Name = "máy ảnh 3",
                            ProductId = 3,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 3",
                            SeoTitle = "máy ảnh 3"
                        },
                        new
                        {
                            Id = 6,
                            Description = "camera 3",
                            Details = "camera 3",
                            LanguageId = "en",
                            Name = "camera 3",
                            ProductId = 3,
                            SeoAlias = "camera 3",
                            SeoDescription = "camera 3",
                            SeoTitle = "camera 3"
                        },
                        new
                        {
                            Id = 7,
                            Description = "máy ảnh 4",
                            Details = "máy ảnh 4",
                            LanguageId = "vi",
                            Name = "máy ảnh 4",
                            ProductId = 4,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 4",
                            SeoTitle = "máy ảnh 4"
                        },
                        new
                        {
                            Id = 8,
                            Description = "camera 4",
                            Details = "camera 4",
                            LanguageId = "en",
                            Name = "camera 4",
                            ProductId = 4,
                            SeoAlias = "camera 4",
                            SeoDescription = "camera 4",
                            SeoTitle = "camera 4"
                        },
                        new
                        {
                            Id = 9,
                            Description = "máy ảnh 5",
                            Details = "máy ảnh 5",
                            LanguageId = "vi",
                            Name = "máy ảnh 5",
                            ProductId = 5,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 5",
                            SeoTitle = "máy ảnh 5"
                        },
                        new
                        {
                            Id = 10,
                            Description = "camera 5",
                            Details = "camera 5",
                            LanguageId = "en",
                            Name = "camera 5",
                            ProductId = 5,
                            SeoAlias = "camera 5",
                            SeoDescription = "camera 5",
                            SeoTitle = "camera 5"
                        },
                        new
                        {
                            Id = 11,
                            Description = "thẻ nhớ 1",
                            Details = "thẻ nhớ 1",
                            LanguageId = "vi",
                            Name = "thẻ nhớ 1",
                            ProductId = 6,
                            SeoAlias = "the nho 1",
                            SeoDescription = "thẻ nhớ 1",
                            SeoTitle = "thẻ nhớ 1"
                        },
                        new
                        {
                            Id = 12,
                            Description = "memory card 1",
                            Details = "memory card 1",
                            LanguageId = "en",
                            Name = "memory card 1",
                            ProductId = 6,
                            SeoAlias = "memory card 1",
                            SeoDescription = "memory card 1",
                            SeoTitle = "memory card 1"
                        },
                        new
                        {
                            Id = 13,
                            Description = "thẻ nhớ 2",
                            Details = "thẻ nhớ 2",
                            LanguageId = "vi",
                            Name = "thẻ nhớ 2",
                            ProductId = 7,
                            SeoAlias = "the nho 2",
                            SeoDescription = "thẻ nhớ 2",
                            SeoTitle = "thẻ nhớ 2"
                        },
                        new
                        {
                            Id = 14,
                            Description = "memory card 2",
                            Details = "memory card 2",
                            LanguageId = "en",
                            Name = "memory card 2",
                            ProductId = 7,
                            SeoAlias = "memory card 2",
                            SeoDescription = "memory card 2",
                            SeoTitle = "memory card 2"
                        },
                        new
                        {
                            Id = 15,
                            Description = "thẻ nhớ 3",
                            Details = "thẻ nhớ 3",
                            LanguageId = "vi",
                            Name = "thẻ nhớ 3",
                            ProductId = 8,
                            SeoAlias = "the nho 3",
                            SeoDescription = "thẻ nhớ 3",
                            SeoTitle = "thẻ nhớ 3"
                        },
                        new
                        {
                            Id = 16,
                            Description = "memory card 3",
                            Details = "memory card 3",
                            LanguageId = "en",
                            Name = "memory card 3",
                            ProductId = 8,
                            SeoAlias = "memory card 3",
                            SeoDescription = "memory card 3",
                            SeoTitle = "memory card 3"
                        },
                        new
                        {
                            Id = 17,
                            Description = "bộ phụ kiện máy ảnh 1",
                            Details = "bộ phụ kiện máy ảnh 1",
                            LanguageId = "vi",
                            Name = "bộ phụ kiện máy ảnh 1",
                            ProductId = 9,
                            SeoAlias = "bo phu kien may anh 1",
                            SeoDescription = "bộ phụ kiện máy ảnh 1",
                            SeoTitle = "bộ phụ kiện máy ảnh 1"
                        },
                        new
                        {
                            Id = 18,
                            Description = "camera combo 1",
                            Details = "camera combo 1",
                            LanguageId = "en",
                            Name = "camera combo 1",
                            ProductId = 9,
                            SeoAlias = "camera combo 1",
                            SeoDescription = "camera combo 1",
                            SeoTitle = "camera combo 1"
                        },
                        new
                        {
                            Id = 19,
                            Description = "thẻ nhớ 4",
                            Details = "thẻ nhớ 4",
                            LanguageId = "vi",
                            Name = "thẻ nhớ 4",
                            ProductId = 10,
                            SeoAlias = "the nho 4",
                            SeoDescription = "thẻ nhớ 4",
                            SeoTitle = "thẻ nhớ 4"
                        },
                        new
                        {
                            Id = 20,
                            Description = "memory card 4",
                            Details = "memory card 4",
                            LanguageId = "en",
                            Name = "memory card 4",
                            ProductId = 10,
                            SeoAlias = "memory card 4",
                            SeoDescription = "memory card 4",
                            SeoTitle = "memory card 4"
                        },
                        new
                        {
                            Id = 21,
                            Description = "máy ảnh 6",
                            Details = "máy ảnh 6",
                            LanguageId = "vi",
                            Name = "máy ảnh 6",
                            ProductId = 11,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 6",
                            SeoTitle = "máy ảnh 6"
                        },
                        new
                        {
                            Id = 22,
                            Description = "camera 6",
                            Details = "camera 6",
                            LanguageId = "en",
                            Name = "camera 6",
                            ProductId = 11,
                            SeoAlias = "camera 6",
                            SeoDescription = "camera 6",
                            SeoTitle = "camera 6"
                        },
                        new
                        {
                            Id = 23,
                            Description = "thẻ nhớ 5",
                            Details = "thẻ nhớ 5",
                            LanguageId = "vi",
                            Name = "thẻ nhớ 5",
                            ProductId = 12,
                            SeoAlias = "the nho 5",
                            SeoDescription = "thẻ nhớ 5",
                            SeoTitle = "thẻ nhớ 5"
                        },
                        new
                        {
                            Id = 24,
                            Description = "memory card 5",
                            Details = "memory card 5",
                            LanguageId = "en",
                            Name = "memory card 5",
                            ProductId = 12,
                            SeoAlias = "memory card 5",
                            SeoDescription = "memory card 5",
                            SeoTitle = "memory card 5"
                        },
                        new
                        {
                            Id = 25,
                            Description = "máy ảnh 7",
                            Details = "máy ảnh 7",
                            LanguageId = "vi",
                            Name = "máy ảnh 7",
                            ProductId = 13,
                            SeoAlias = "may anh",
                            SeoDescription = "máy ảnh 7",
                            SeoTitle = "máy ảnh 7"
                        },
                        new
                        {
                            Id = 26,
                            Description = "camera 7",
                            Details = "camera 7",
                            LanguageId = "en",
                            Name = "camera 7",
                            ProductId = 13,
                            SeoAlias = "camera 7",
                            SeoDescription = "camera 7",
                            SeoTitle = "camera 7"
                        },
                        new
                        {
                            Id = 27,
                            Description = "giầy nữ 1",
                            Details = "giầy nữ 1",
                            LanguageId = "vi",
                            Name = "giầy nữ 1",
                            ProductId = 14,
                            SeoAlias = "giay nu 1",
                            SeoDescription = "giầy nữ 1",
                            SeoTitle = "giầy nữ 1"
                        },
                        new
                        {
                            Id = 28,
                            Description = "boots 1",
                            Details = "boots 1",
                            LanguageId = "en",
                            Name = "boots 1",
                            ProductId = 14,
                            SeoAlias = "boots 1",
                            SeoDescription = "boots 1",
                            SeoTitle = "boots 1"
                        },
                        new
                        {
                            Id = 29,
                            Description = "giầy nữ 2",
                            Details = "giầy nữ 2",
                            LanguageId = "vi",
                            Name = "giầy nữ 2",
                            ProductId = 15,
                            SeoAlias = "giay nu 2",
                            SeoDescription = "giầy nữ 2",
                            SeoTitle = "giầy nữ 2"
                        },
                        new
                        {
                            Id = 30,
                            Description = "boots 2",
                            Details = "boots 2",
                            LanguageId = "en",
                            Name = "boots 2",
                            ProductId = 15,
                            SeoAlias = "boots 2",
                            SeoDescription = "boots 2",
                            SeoTitle = "boots 2"
                        },
                        new
                        {
                            Id = 31,
                            Description = "giầy nữ 3",
                            Details = "giầy nữ 3",
                            LanguageId = "vi",
                            Name = "giầy nữ 3",
                            ProductId = 16,
                            SeoAlias = "giay nu 3",
                            SeoDescription = "giầy nữ 3",
                            SeoTitle = "giầy nữ 3"
                        },
                        new
                        {
                            Id = 32,
                            Description = "boots 3",
                            Details = "boots 3",
                            LanguageId = "en",
                            Name = "boots 3",
                            ProductId = 16,
                            SeoAlias = "boots 3",
                            SeoDescription = "boots 3",
                            SeoTitle = "boots 3"
                        },
                        new
                        {
                            Id = 33,
                            Description = "giầy nữ 4",
                            Details = "giầy nữ 4",
                            LanguageId = "vi",
                            Name = "giầy nữ 4",
                            ProductId = 17,
                            SeoAlias = "giay nu 4",
                            SeoDescription = "giầy nữ 4",
                            SeoTitle = "giầy nữ 4"
                        },
                        new
                        {
                            Id = 34,
                            Description = "boots 4",
                            Details = "boots 4",
                            LanguageId = "en",
                            Name = "boots 4",
                            ProductId = 17,
                            SeoAlias = "boots 4",
                            SeoDescription = "boots 4",
                            SeoTitle = "boots 4"
                        },
                        new
                        {
                            Id = 35,
                            Description = "máy đọc sách 1",
                            Details = "máy đọc sách 1",
                            LanguageId = "vi",
                            Name = "máy đọc sách 1",
                            ProductId = 18,
                            SeoAlias = "may doc sach 1",
                            SeoDescription = "máy đọc sách 1",
                            SeoTitle = "máy đọc sách 1"
                        },
                        new
                        {
                            Id = 36,
                            Description = "kindle 1",
                            Details = "kindle 1",
                            LanguageId = "en",
                            Name = "kindle 1",
                            ProductId = 18,
                            SeoAlias = "kindle 1",
                            SeoDescription = "kindle 1",
                            SeoTitle = "kindle 1"
                        },
                        new
                        {
                            Id = 37,
                            Description = "máy ảnh 8",
                            Details = "máy ảnh 8",
                            LanguageId = "vi",
                            Name = "máy ảnh 8",
                            ProductId = 19,
                            SeoAlias = "may anh 8",
                            SeoDescription = "máy ảnh 8",
                            SeoTitle = "máy ảnh 8"
                        },
                        new
                        {
                            Id = 38,
                            Description = "camera 8",
                            Details = "camera 8",
                            LanguageId = "en",
                            Name = "camera 8",
                            ProductId = 19,
                            SeoAlias = "camera 8",
                            SeoDescription = "camera 8",
                            SeoTitle = "camera 8"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/1.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 1,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/2.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 2,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/3.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 3,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/4.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 4,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/5.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 5,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.",
                            Image = "/themes/images/carousel/6.png",
                            Name = "Second Thumbnail label",
                            SortOrder = 6,
                            Status = 1,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductTranslation", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Transaction", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("ProductTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
